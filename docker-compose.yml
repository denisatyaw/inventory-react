version: '3'
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/backend  # Sinkronkan folder backend dengan folder /backend di container
      - backend-node-modules:/backend/node_modules  # Volume untuk node_modules backend
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=rootpassword
      - MYSQL_DATABASE=mydatabase
    depends_on:
      - mysql
    command: npm run dev  # Gunakan mode production
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:80"  # Gunakan port 80 karena pakai Nginx
    depends_on:
      - backend
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "8080:80"  # Akses phpMyAdmin di port 8080
    depends_on:
      - mysql
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"  # Port yang digunakan untuk akses Redis
    networks:
      - app-network

volumes:
  mysql-data:
    driver: local
  backend-node-modules:
    driver: local  # Volume untuk node_modules backend

networks:
  app-network:
    driver: bridge
